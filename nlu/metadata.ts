import { writeFileSync, readFileSync } from "fs";
import { getBotFileLocations } from "../database/functions/bot";
import { getBotContext } from "../database/functions/bot";

export const generateMetadata = async (id: number) => {
  writeIntentsToFile(id);
  writeTriggersToFile(id);
  writeButtonsToFile(id);
};

export const getDefaultCorpus = async (id: number) => {
  try {
    const useBot = await getBotFileLocations(id);
    if (!useBot) {
      console.error("Bot not found");
      return;
    }
    const { corpus_file } = useBot;
    const default_corpus_buffer = readFileSync(corpus_file);
    const default_corpus = JSON.parse(default_corpus_buffer.toString());
    return default_corpus;
  } catch (err) {
    console.error(err);
    return;
  }
};

export const getIntents = async (id: number) => {
  try {
    const corpus = await getDefaultCorpus(id);
    if (!corpus) return [];

    return corpus.data.map((item: any) => item.intent);
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getIntentsFull = async (id: number) => {
  try {
    const corpus = await getDefaultCorpus(id);
    if (!corpus) return [];

    return corpus.data;
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getDataForIntent = async (
  id: number,
  intent: string
): Promise<any> => {
  try {
    const corpus = await getDefaultCorpus(id);
    if (!corpus) return [];

    const data = corpus.data.find((item: any) => item.intent === intent);
    return data;
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getTriggers = async (id: number) => {
  try {
    const corpus = await getDefaultCorpus(id);

    if (!corpus) return {};

    const triggers: {
      [key: string]: {
        type: string;
        args: { [key: string]: any };
        attachments: string[];
      }[];
    } = {};
    corpus.data.forEach((item: any) => {
      if (item.triggers) {
        triggers[item.intent] = item.triggers;
      }
    });

    return triggers;
  } catch (error) {
    console.error(error);
    return {};
  }
};

export const getIntentButtons = async (id: number, intent: string) => {
  try {
    const corpus = await getDefaultCorpus(id);

    if (!corpus) return [];

    const buttons: { type: string; metadata?: string }[] = [];
    corpus.data.forEach((item: any) => {
      if (item.intent === intent && item.buttons) {
        buttons.push(...item.buttons);
      }
    });

    return buttons;
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getButtons = async (id: number) => {
  try {
    const corpus = await getDefaultCorpus(id);

    if (!corpus) return [];

    const buttons: { type: string; metadata?: string }[] = [];
    corpus.data.forEach((item: any) => {
      if (item.buttons) {
        buttons.push(...item.buttons);
      }
    });

    const uniqueButtons = buttons.filter(
      (item, index) =>
        buttons.findIndex((button) => button.type === item.type) === index
    );

    return uniqueButtons;
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const writeIntentsToFile = async (id: number) => {
  try {
    const intents = getIntents(id);

    writeFileSync(
      `./storage/metadata/${id}-intents.autogenerated.json`,
      JSON.stringify(intents, null, 2)
    );
  } catch (err) {
    console.error(err);
  }
};

export const writeTriggersToFile = async (id: number) => {
  try {
    const triggers = getTriggers(id);

    writeFileSync(
      `./storage/metadata/${id}-triggers.autogenerated.json`,
      JSON.stringify(triggers, null, 2)
    );
  } catch (err) {
    console.error(err);
  }
};

export const writeButtonsToFile = async (id: number) => {
  try {
    const buttons = getButtons(id);

    writeFileSync(
      `./storage/metadata/${id}-buttons.autogenerated.json`,
      JSON.stringify(buttons, null, 2)
    );
  } catch (err) {
    console.error(err);
  }
};

export const getIntentContextName = async (id: number, intent: string) => {
  try {
    const data = await getDataForIntent(id, intent);
    if (!data) return [];

    return data.context;
  } catch (error) {
    console.error(error);
    return [];
  }
};

export const getIntentContextLoaded = async (id: number, intent: string) => {
  try {
    const data = await getDataForIntent(id, intent);
    if (!data) return [];

    const contextFile = await getBotContext(id);

    if (!contextFile) return [];

    const context = data.context;

    const contextLoaded: string[] = context.map((item: string) => {
      return contextFile[item];
    });

    return contextLoaded;
  } catch (error) {
    console.error(error);
    return [];
  }
};
